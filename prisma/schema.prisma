generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id          String   @id @default(cuid())
  make        String
  model       String
  miles       String
  engine      String
  gearbox     String
  fuel        String
  doors       String?
  seats       String?
  owners      String?
  description String?
  performance String[]
  runningCost String[] @map(name: "running_cost")
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  listing     Listing  @relation(fields: [listingId], references: [id])
  listingId   String   @unique

  @@map(name: "vehicle")
}

model Listing {
  id          String   @id @default(cuid())
  title       String
  subTitle    String
  description String
  price       Decimal  @db.Money
  images      String[]
  draft       Boolean  @default(true)
  createdAt   DateTime @default(now()) @map(name: "created_at")
  updatedAt   DateTime @updatedAt @map(name: "updated_at")
  author      User     @relation(fields: [authorId], references: [id])
  authorId    String
  vehicle     Vehicle?

  @@map(name: "listings")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  contactNumber String?   @map(name: "contact_number")
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @updatedAt @map(name: "updated_at")
  listings      Listing[]
  accounts      Account[]
  sessions      Session[]
  address       Address[]

  @@map(name: "users")
}

model Address {
  id         String  @id @default(cuid())
  firstLine  String  @map(name: "first_line")
  secondLine String? @map(name: "second_line")
  thirdLine  String? @map(name: "third_line")
  city       String
  county     String?
  postcode   String
  country    String
  user       User    @relation(fields: [userId], references: [id])
  userId     String

  @@map(name: "address")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
